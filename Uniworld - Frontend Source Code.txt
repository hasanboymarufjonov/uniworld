Uniworld - Frontend Source Code

--- File: app\api.js ---

import axios from "axios";
import BASE_URL from "./config.js";

const lang = localStorage.getItem("i18nextLng");

const api = axios.create({
    baseURL: BASE_URL,
    timeout: 10000, 
    headers: {
        'Content-Type': 'application/json',
        "Accept-Language": lang,
    },
});


api.interceptors.response.use(
    (response) => {
        return response;
    },
    (error) => {
        console.error("API error:", error);
        return Promise.reject(error);
    }
);

export default api;



--- File: app\config.js ---

const BASE_URL = "https://panel.uniworld.uz/api/v1";

export default BASE_URL;



--- File: app\i18n.js ---

import i18n from "i18next";
import { initReactI18next } from "react-i18next";
import LanguageDetector from "i18next-browser-languagedetector";
import mainTranslations from "../translations/translations.json"

const translations = {
  en: {
    translation: {
      ...mainTranslations.en.translation,
    },
  },
  uz: {
    translation: {
      ...mainTranslations.uz.translation,
    },
  },
};

i18n.use(LanguageDetector).use(initReactI18next).init({
  resources: translations,
  fallbackLng: "en",
  debug: true,
});

export default i18n;



--- File: App.jsx ---

import { Route, Routes } from "react-router-dom";
import Header from "./components/layout/Header.jsx";
import Footer from "./components/layout/Footer.jsx";
import HomePage from "./pages/HomePage";
import UniversityPage from "./pages/UniversityPage";
import SearchPage from "./pages/SearchPage";
import UniversityOverview from "./components/pages/UniversityPage/UniversityOverview.jsx";
import UniversityCourses from "./components/pages/UniversityPage/UniversityCourses.jsx";
import TermsAndConditions from "./components/common/TermsAndConditions.jsx";
import PrivacyPolicy from "./components/common/PrivacyPolicy.jsx";
import AboutUs from "./components/pages/AboutPage/AboutUs.jsx";
import PathwayAdvice from "./components/pages/PathwayPage/PathwayAdvice.jsx";

function App() {
  return (
    <div className="bg-primary">
      <Header />
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route
          path="/universities/:universityName"
          element={<UniversityPage />}
        >
          <Route path="overview" element={<UniversityOverview />} />
          <Route path="courses" element={<UniversityCourses />} />
        </Route>
        <Route path="/universities" element={<SearchPage />} />
        <Route path="/terms-and-conditions" element={<TermsAndConditions />} />
        <Route path="/privacy-policy" element={<PrivacyPolicy />} />
        <Route path="/about-us" element={<AboutUs />} />
        <Route
          path="/pathway-advice/:pathway/detail"
          element={<PathwayAdvice />}
        />
      </Routes>
      <Footer />
    </div>
  );
}

export default App;



--- File: components\common\LanguageSwitcher.jsx ---

import { useTranslation } from "react-i18next";

function LanguageSwitcher() {
  const { t, i18n } = useTranslation();

  const handleLanguageChange = (event) => {
    const lang = event.target.value;
    i18n.changeLanguage(lang);

    window.location.reload();
  };

  return (
    <select
      onChange={handleLanguageChange}
      defaultValue={i18n.language}
      className="rounded w-18 h-10 p-2 text-gray-900 border border-gray-400 bg-primary"
    >
      <option value="en">{t("En")}</option>
      <option value="uz">{t("Uz")} </option>
    </select>
  );
}

export default LanguageSwitcher;



--- File: components\common\PrivacyPolicy.jsx ---

import { useState, useEffect } from "react";
import api from "../../app/api";
import HtmlContentRenderer from "../shared/HtmlContentRenderer.jsx";

const PrivacyPolicy = () => {
  const [policy, setPolicy] = useState("");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchPrivacyPolicy = async () => {
      try {
        const response = await api.get('/common/privacy-policy/');
        setPolicy(response.data.policy);
        setLoading(false);
        console.log(response.data.policy);
      } catch (error) {
        console.error("Error fetching privacy policy: ", error);
        setLoading(false);
      }
    };

    fetchPrivacyPolicy();
  }, []);

  return (
      <div className="max-w-3xl mx-auto p-6">
        <h1 className="text-3xl font-semibold mb-4">Privacy Policy</h1>
        {loading ? (
            <p>Loading...</p>
        ) : (
            <HtmlContentRenderer htmlContent={policy} />
        )}
      </div>
  );
};

export default PrivacyPolicy;



--- File: components\common\TermsAndConditions.jsx ---

import { useState, useEffect } from "react";
import api from "../../app/api";

const TermsAndConditions = () => {
  const [terms, setTerms] = useState("");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchTerms = async () => {
      try {
        const response = await api.get("/common/terms-and-conditions/");
        setTerms(response.data.terms);
        setLoading(false);
        console.log(response.data.terms);
      } catch (error) {
        console.error("Error fetching terms and conditions: ", error);
        setLoading(false);
      }
    };

    fetchTerms();
  }, []);

  return (
    <div className="max-w-3xl mx-auto p-6">
      <h1 className="text-3xl font-semibold mb-4">Terms and Conditions</h1>
      {loading ? (
        <p>Loading...</p>
      ) : (
        <div dangerouslySetInnerHTML={{ __html: terms }} />
      )}
    </div>
  );
};

export default TermsAndConditions;



--- File: components\layout\Footer.jsx ---

import { FaInstagram, FaYoutube, FaTelegram } from "react-icons/fa";
import logoImg from "../../assets/images/logos/logo.png";
import { Link } from "react-router-dom";
import { useTranslation } from "react-i18next";

const Footer = () => {
  const { t } = useTranslation();

  return (
    <footer className="w-full py-4 px-4 sm:px-6 lg:px-8 mx-auto border-t border-gray-900 bg-white">
      <div className="text-center">
        <div className="mb-3">
          <img src={logoImg} alt="uniworld logo" className="w-32 mx-auto" />
        </div>
        <div className="mb-3">
          <p className="text-gray-900">
            {t("One Click to Your Dream University")}
          </p>
        </div>
        <div className="mb-3 flex justify-center space-x-4">
          <a
            className="inline-flex justify-center items-center w-8 h-8 text-gray-900 hover:bg-gray-100 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-offset-2 transition"
            href="#"
          >
            <FaTelegram size={16} />
          </a>
          <a
            className="inline-flex justify-center items-center w-8 h-8 text-gray-900 hover:bg-gray-100 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-offset-2 transition"
            href="https://www.instagram.com/uniworld_study"
          >
            <FaInstagram size={16} />
          </a>
          <a
            className="inline-flex justify-center items-center w-8 h-8 text-gray-900 hover:bg-gray-100 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-offset-2 transition"
            href="#"
          >
            <FaYoutube size={16} />
          </a>
        </div>

        <div className="flex flex-col md:flex-row md:justify-between md:items-center mt-3 text-gray-900">
          <div className="flex flex-wrap justify-center gap-4 mb-4 md:mb-0">
            <Link to="/terms-and-conditions" className="hover:underline">
              Terms & Conditions
            </Link>
            <Link to="/privacy-policy" className="hover:underline">
              Privacy Policy
            </Link>
            <Link to="/about-us" className="hover:underline">
              About us
            </Link>
          </div>
          <div>
            <p>Â© {t("2024 All rights reserved.")}</p>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;



--- File: components\layout\Header.jsx ---

import React from "react";
import {
  Navbar,
  Typography,
  IconButton,
  Collapse,
} from "@material-tailwind/react";
import { Link } from "react-router-dom";
import LanguageSwitcher from "../common/LanguageSwitcher.jsx";
import logoImg from "../../assets/images/logos/logo.png";
import { useTranslation } from "react-i18next";

export default function Header() {
  const { t } = useTranslation();

  const [openNav, setOpenNav] = React.useState(false);

  React.useEffect(() => {
    window.addEventListener(
      "resize",
      () => window.innerWidth >= 960 && setOpenNav(false)
    );
  }, []);

  const navList = (
    <ul className="mt-2 mb-4 flex flex-col gap-2 lg:mb-0 lg:mt-0 lg:flex-row lg:items-center lg:gap-6">
      <Typography
        as="li"
        variant="small"
        color="blue-gray"
        className="p-1 font-normal"
      >
        <Link to="/about-us" className="flex items-center">
          {t("About us")}
        </Link>
      </Typography>
      <Typography
        as="li"
        variant="small"
        color="blue-gray"
        className="p-1 font-normal"
      >
        <Link to="/universities" className="flex items-center">
          {t("Universities")}
        </Link>
      </Typography>
      <Typography>
        <LanguageSwitcher />
      </Typography>
    </ul>
  );

  return (
    <div className="max-h-[768px] ">
      <Navbar className="sticky top-0 z-10 h-max max-w-full rounded-none px-4 py-2 lg:px-8 lg:py-2">
        <div className="flex items-center justify-between text-blue-gray-900">
          <Typography
            as="a"
            href="/"
            className="mr-4 cursor-pointer py-1.5 font-medium"
          >
            <Link to="/">
              <img src={logoImg} className="w-32 my-2" alt="" />
            </Link>
          </Typography>
          <div className="flex items-center gap-4">
            <div className="mr-4 hidden lg:block">{navList}</div>

            <IconButton
              variant="text"
              className="ml-auto h-6 w-6 text-inherit hover:bg-transparent focus:bg-transparent active:bg-transparent lg:hidden"
              ripple={false}
              onClick={() => setOpenNav(!openNav)}
            >
              {openNav ? (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  className="h-6 w-6"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              ) : (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth={2}
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M4 6h16M4 12h16M4 18h16"
                  />
                </svg>
              )}
            </IconButton>
          </div>
        </div>
        <Collapse open={openNav}>{navList}</Collapse>
      </Navbar>
    </div>
  );
}



--- File: components\pages\AboutPage\AboutUs.jsx ---

import { useState, useEffect } from "react";
import api from "../../../app/api.js";
import HtmlContentRenderer from "../../shared/HtmlContentRenderer.jsx";
import { Link } from "react-router-dom";
import { HiArrowLongRight } from "react-icons/hi2";

import Img1 from "../../../assets/images/photos/1.jpeg";
import Img2 from "../../../assets/images/photos/2.jpeg";
import Img3 from "../../../assets/images/photos/3.jpeg";
import Img4 from "../../../assets/images/photos/4.webp";
import Img5 from "../../../assets/images/photos/5.jpeg";

const AboutUs = () => {
  const [aboutUsContent, setAboutUsContent] = useState({
    findUniversity: "",
    ourServices: "",
    cardTitle: "",
    cardBody: "",
  });
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchAboutUsContent = async () => {
      try {
        const response = await api.get("/common/about-us/");
        const data = response.data;
        setAboutUsContent({
          findUniversity: data.find_university,
          ourServices: data.our_services,
          cardTitle: data.card_title || "",
          cardBody: data.card_body || "",
        });
        setLoading(false);
      } catch (error) {
        console.error("Error fetching about us content: ", error);
      }
    };

    fetchAboutUsContent();
  }, []);

  return (
      <div className="bg-primary">
        <div className="max-w-7xl mx-auto p-4">
          {loading ? (
              <p>Loading...</p>
          ) : (
              <>
                <div className="md:flex items-center justify-between rounded-lg w-full p-8">
                  <div className="mb-8 mr-8">
                    <Link to="/universities">
                      <p className="bg-white w-fit text-xs md:text-sm rounded-xl border border-gray-700 text-gray-700 p-1">
                        Search, compare and apply to universities in the World
                      </p>
                    </Link>
                    <h2 className="text-4xl md:text-5xl font-semibold mb-2 mt-2">
                      Find the Right University
                    </h2>
                    <p className="text-base text-gray-700">
                      <HtmlContentRenderer
                          htmlContent={aboutUsContent.findUniversity}
                      />
                    </p>
                  </div>

                  <div className="flex">
                    <div className="mt-40 mr-5">
                      <img
                          src={Img1}
                          alt="University Image 1"
                          className="rounded-lg w-[150px] h-[150px] object-cover"
                      />
                    </div>
                    <div className="mt-20">
                      <div className="mb-4">
                        <img
                            src={Img2}
                            alt="University Image 2"
                            className="rounded-lg w-[150px] h-[150px] object-cover"
                        />
                      </div>
                      <div className="mb-4">
                        <img
                            src={Img3}
                            alt="University Image 3"
                            className="rounded-lg w-[150px] h-[150px] object-cover"
                        />
                      </div>
                    </div>
                    <div className="ml-5">
                      <div className="mb-4">
                        <img
                            src={Img4}
                            alt="University Image 4"
                            className="rounded-lg w-[150px] h-[150px] object-cover"
                        />
                      </div>
                      <div className="mb-4">
                        <img
                            src={Img5}
                            alt="University Image 5"
                            className="rounded-lg w-[150px] h-[150px] object-cover"
                        />
                      </div>
                    </div>
                  </div>
                </div>
                <div className="mb-4 p-8">
                  <h2 className="text-4xl font-semibold ">Our Services</h2>
                  <div className="flex-none md:flex">
                    <div className="md:w-2/3 md:pr-10">
                      <p className="mt-8">
                        <HtmlContentRenderer
                            htmlContent={aboutUsContent.ourServices}
                        />
                      </p>
                    </div>
                    <div className="md:w-1/3 md:pl-20 mt-6">
                      <p className="text-5xl font-bold">2024</p>
                      <p className="py-4">Website Launched</p>
                      <p className="text-5xl font-bold">20.000</p>
                      <p className="py-4">
                        Students & parents are planned to be served per year
                      </p>
                      <p className="text-5xl font-bold">100+</p>
                      <p className="pt-4">Universities and colleges Worldwide</p>
                    </div>
                  </div>
                </div>
                {aboutUsContent.cardTitle && aboutUsContent.cardBody && (
                    <div className="rounded-lg md:p-20 p-10 bg-[#111827] text-white">
                      <h2 className="text-xl md:text-3xl font-semibold mb-2 text-center">
                        {aboutUsContent.cardTitle}
                      </h2>
                      <p className="text-[#D1D5DB] md:px-28 text-center pt-5 text-base md:text-xl">
                        <HtmlContentRenderer htmlContent={aboutUsContent.cardBody} />
                      </p>
                      <div className="flex justify-center">
                        <button className="bg-white text-[#111827] p-1 md:p-2 rounded text-base font-semibold mr-2">
                          Contact us
                        </button>
                        <Link to="/universities">
                          <button className="md:p-2 p-1 rounded text-base font-semibold ml-2 flex items-center">
                            Check universities <HiArrowLongRight className="ml-2" />
                          </button>
                        </Link>
                      </div>
                    </div>
                )}
              </>
          )}
        </div>
      </div>
  );
};

export default AboutUs;



--- File: components\pages\HomePage\AdvisorApplication.jsx ---

import { useState } from "react";
import api from "../../../app/api.js";
import { Link } from "react-router-dom";
import RegionSelector from "../../shared/RegionSelector.jsx";
import CountrySelector from "../../shared/CountrySelector.jsx";
import { useTranslation } from "react-i18next";

const AdvisorApplication = () => {
  const { t } = useTranslation();
  const [isOpen, setIsOpen] = useState(false);
  const [formData, setFormData] = useState({
    type: "SPEAK_WITH_ADVISOR",
    first_name: "",
    last_name: "",
    who_are_you: "",
    phone_number: "",
    country: "",
    region: "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleRegionSelect = (regionId) => {
    setFormData((prevData) => ({
      ...prevData,
      region: regionId,
    }));
  };

  const handleCountrySelect = (countryId) => {
    setFormData((prevData) => ({
      ...prevData,
      country: countryId,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await api.post(
        "/applications/advisor-application/create/",
        formData
      );
      if (response.status === 200) {
        setIsOpen(false);
      } else {
        console.error("Error submitting data");
      }
    } catch (error) {
      console.error("Error submitting data:", error);
    }
  };

  return (
    <div className="bg-primary flex justify-center items-center">
      <button
        onClick={() => setIsOpen(true)}
        className="bg-secondary py-3 px-10 rounded-lg text-white"
      >
        {t("Speak to Advisor")}
      </button>

      {isOpen && <div className="fixed inset-0 bg-black opacity-50 z-50"></div>}

      {isOpen && (
        <div className="fixed z-50 inset-0 overflow-y-auto px-2">
          <div className="flex items-center justify-center min-h-screen">
            <div className="bg-white p-8 rounded-lg relative">
              <h2 className="text-2xl font-bold mb-4">
                {t("Speak to Advisor")}
              </h2>
              <button
                onClick={() => setIsOpen(false)}
                className="absolute top-4 right-4 text-black hover:text-gray-900 text-2xl"
              >
                &#10005;
              </button>
              <form
                onSubmit={handleSubmit}
                className="space-y-4 md:w-[600px] w-full"
              >
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div className="flex flex-col">
                    <label
                      htmlFor="first_name"
                      className="text-sm font-semibold"
                    >
                      {t("First Name")}
                    </label>
                    <input
                      type="text"
                      id="first_name"
                      name="first_name"
                      value={formData.first_name}
                      onChange={handleChange}
                      placeholder="Enter your first name"
                      className="border border-gray-300 rounded-md py-2 px-3 mt-1"
                    />
                  </div>
                  <div className="flex flex-col">
                    <label
                      htmlFor="last_name"
                      className="text-sm font-semibold"
                    >
                      {t("Last Name")}
                    </label>
                    <input
                      type="text"
                      id="last_name"
                      name="last_name"
                      value={formData.last_name}
                      onChange={handleChange}
                      placeholder="Enter your last name"
                      className="border border-gray-300 rounded-md py-2 px-3 mt-1"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div className="flex flex-col">
                    <label htmlFor="country" className="text-sm font-semibold">
                      {t("Country")}
                    </label>
                    <CountrySelector onSelect={handleCountrySelect} />
                  </div>
                  <div className="flex flex-col">
                    <label htmlFor="region" className="text-sm font-semibold">
                      {t("Region")}
                    </label>
                    <RegionSelector onSelect={handleRegionSelect} />
                  </div>
                </div>

                <div className="flex flex-col">
                  <label
                    htmlFor="who_are_you"
                    className="text-sm font-semibold"
                  >
                    {t("Who Are You")}
                  </label>
                  <select
                    id="who_are_you"
                    name="who_are_you"
                    value={formData.who_are_you}
                    onChange={handleChange}
                    className="border border-gray-300 rounded-md py-2 px-3 mt-1"
                  >
                    <option value="">Select</option>
                    <option value="PARENT">Parent</option>
                    <option value="STUDENT">Student</option>
                  </select>
                </div>

                <div className="flex flex-col">
                  <label
                    htmlFor="phone_number"
                    className="text-sm font-semibold"
                  >
                    {t("Phone Number")}
                  </label>
                  <input
                    type="tel"
                    id="phone_number"
                    name="phone_number"
                    value={formData.phone_number}
                    onChange={handleChange}
                    placeholder="Enter your phone number"
                    className="border border-gray-300 rounded-md py-2 px-3 mt-1"
                  />
                </div>
                <hr />
                <div className="py-2">
                  <p>
                    By clicking the Submit Application button, you agree to our{" "}
                    <Link
                      to="/terms-and-conditions"
                      className="underline text-secondary"
                    >
                      Terms & Conditions
                    </Link>{" "}
                    and{" "}
                    <Link
                      to="/privacy-policy"
                      className="underline text-secondary"
                    >
                      Privacy Policy
                    </Link>
                  </p>
                </div>
                <button
                  type="submit"
                  className="bg-secondary py-3 px-6 rounded-lg text-white"
                >
                  Submit
                </button>
              </form>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdvisorApplication;



--- File: components\pages\HomePage\AssistanceCards.jsx ---

import visaImg from "../../../assets/images/illustrations/visa.png";
import applicationImg from "../../../assets/images/illustrations/guidance.png";
import matchImg from "../../../assets/images/illustrations/operator.png";

import { useTranslation } from "react-i18next";

const AssistanceCards = () => {
  const { t } = useTranslation();

  return (
      <div className="bg-primary px-8 py-5">
        <div className="text-center">
          <h2 className="text-2xl md:text-3xl lg:text-4xl pt-10">
            {t("How UniWorld Can Help You")}
          </h2>
          <p className="text-base mt-1">
            {t(
                "Our team of advisors is ready to support you at every step of your study abroad journey"
            )}
          </p>
        </div>

        <div className="grid md:grid-cols-3 gap-10 md:mx-32 py-10">
          <div className="flex flex-col">
            <img
                className="w-full h-[300px] object-cover"
                src={visaImg}
                alt="Visa & Travel Advice"
            />
            <div className="p-4 md:p-5">
              <h3 className="text-lg font-bold text-gray-800">
                {t("Visa & Travel Advice")}
              </h3>
              <p className="mt-1 text-gray-700">
                {t(
                    "Get help after application, all the way to your first day at university."
                )}
              </p>
            </div>
          </div>

          <div className="flex flex-col">
            <img
                className="w-full h-[300px] object-cover"
                src={matchImg}
                alt="Application Guidance"
            />
            <div className="p-4 md:p-5">
              <h3 className="text-lg font-bold text-gray-800">
                {t("Application Guidance")}
              </h3>
              <p className="mt-1 text-gray-700">
                {t("We'll get you to the right place to start your application.")}
              </p>
            </div>
          </div>

          <div className="flex flex-col">
            <img
                className="w-full h-[300px] object-cover"
                src={applicationImg}
                alt="Find Your Best Matches"
            />
            <div className="p-4 md:p-5">
              <h3 className="text-lg font-bold text-gray-800">
                {t("Find Your Best Matches")}
              </h3>
              <p className="mt-1 text-gray-700">
                {t(
                    "See programs that best match your eligibility and aspirations."
                )}
              </p>
            </div>
          </div>
        </div>
      </div>
  );
};

export default AssistanceCards;



--- File: components\pages\HomePage\CareerCompass.jsx ---

import { useState, useEffect } from "react";
import api from "../../../app/api.js"
import { Link } from "react-router-dom";

const CareerCompass = () => {
  const [careers, setCareers] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    api
      .get("/article/pathway-advice/list/")
      .then((response) => {
        setCareers(response.data.results);
        setLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching career data:", error);
        setLoading(false);
      });
  }, []);

  if (loading) {
    return (
      <div className="flex justify-center items-center h-screen">
        Loading...
      </div>
    );
  }

  return (
    <div className="mx-20 py-8 ">
      <h2 className="text-4xl">
        <span className="font-bold">Career Compass:</span> Pick your passion,
        we'll find the path.
      </h2>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-10">
        {careers.map((career) => (
          <Link
            to={`pathway-advice/${career.article_slug}/detail`}
            key={career.id}
            className="flex items-center space-x-4 p-4 border rounded-lg shadow-md bg-white"
          >
            <img
              src={career.icon}
              alt={`${career.title} icon`}
              className="w-12 h-12"
            />
            <div>
              <h3 className="text-lg font-semibold">{career.title}</h3>
              <p className="text-sm text-gray-600">{career.description}</p>
            </div>
          </Link>
        ))}
      </div>
    </div>
  );
};

export default CareerCompass;



--- File: components\pages\HomePage\Countries.jsx ---

import { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import api from "../../../app/api.js"

const Countries = () => {
  const [countries, setCountries] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchCountries = async () => {
      try {
        const response = await api.get(`/common/countries/`, {
          params: {
            is_top: true,
            limit: 5,
          },
        });
        setCountries(response.data.results);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching countries:", error);
        setLoading(false);
      }
    };

    fetchCountries();
  }, []);

  return (
    <div className="bg-primary">
      {loading ? (
        <p>Loading...</p>
      ) : (
        <div className="max-w-[85rem] px-4 sm:px-6 lg:px-8  py-2 mx-auto">
          <div className="grid grid-cols-2 lg:grid-cols-5 gap-1">
            {countries.map((country, index) => (
              <Link
                key={index}
                to={`/universities?country=${country.id}&specialty=&qualification_level=`}
                className={`bg-white border shadow-sm rounded-xl p-4 ${
                  index === 2 ? "col-span-2 lg:col-span-1" : "col-span-1"
                }`}
              >
                <p className="text-center">{country.name}</p>
              </Link>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default Countries;



--- File: components\pages\HomePage\EligibilityCheck.jsx ---

import { useState } from "react";
import api from "../../../app/api";
import { useForm } from "react-hook-form";
import Specialties from "../../shared/Specialties.jsx";
import PhoneInput from "react-phone-input-2";
import "react-phone-input-2/lib/style.css";
import { Link } from "react-router-dom";

const EligibilityCheck = () => {
  const { register, handleSubmit, reset, setValue } = useForm();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);

  const handleOpenModal = () => {
    setIsModalOpen(true);
    setSuccess(false);
    setError(null);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    reset();
  };

  const onSubmit = async (data) => {
    setLoading(true);
    setError(null);

    try {
      await api.post(`/applications/advisor-application/create/`, {
        type: "ELIGIBILITY_CHECK",
        ...data,
      });
      setSuccess(true);
      handleCloseModal();
    } catch (err) {
      setError(
        "An error occurred while submitting the form. Please try again."
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex justify-center items-center">
      <button
        onClick={handleOpenModal}
        className="px-8 py-4 bg-secondary text-white rounded-lg"
      >
        Apply for Eligibility Check
      </button>

      {isModalOpen && (
        <div className="fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-50 z-50">
          <div className="bg-white rounded-lg shadow-lg w-full max-w-md p-4 max-h-full overflow-auto">
            <h2 className="text-xl font-semibold mb-4">Eligibility Check</h2>
            {error && <p className="text-red-500 mb-4">{error}</p>}
            {success && (
              <p className="text-green-500 mb-4">
                Application submitted successfully!
              </p>
            )}
            <form onSubmit={handleSubmit(onSubmit)}>
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium mb-1">
                    First Name
                  </label>
                  <input
                    {...register("first_name", { required: true })}
                    className="w-full px-3 py-2 border rounded-lg"
                    type="text"
                    required
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Last Name
                  </label>
                  <input
                    {...register("last_name", { required: true })}
                    className="w-full px-3 py-2 border rounded-lg"
                    type="text"
                    required
                  />
                </div>
              </div>
              <div className="mb-4">
                <label className="block text-sm font-medium mb-1">
                  Phone Number
                </label>
                <PhoneInput
                  country={"uz"}
                  value=""
                  onChange={(phone) => setValue("phone_number", phone)}
                  inputProps={{
                    name: "phone_number",
                    required: true,
                  }}
                  inputStyle={{
                    width: "100%",
                    borderRadius: "0.375rem",
                    border: "1px solid rgb(238, 238, 238)",
                  }}
                />
              </div>
              <div className="mb-4">
                <label className="block text-sm font-medium mb-1">Age</label>
                <input
                  {...register("age", { required: true })}
                  className="w-full px-3 py-2 border rounded-lg"
                  type="number"
                  required
                />
              </div>
              <div className="grid grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Current Education Level
                  </label>
                  <select
                    {...register("current_education_level", { required: true })}
                    className="w-full px-3 py-2 border rounded-lg"
                    required
                  >
                    <option value="HIGH_SCHOOL">High School</option>
                    <option value="BACHELOR">Bachelor</option>
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium mb-1">
                    Needed Education Level
                  </label>
                  <select
                    {...register("needed_education_level", { required: true })}
                    className="w-full px-3 py-2 border rounded-lg"
                    required
                  >
                    <option value="BACHELOR">Bachelor</option>
                    <option value="MASTER">Master</option>
                  </select>
                </div>
              </div>
              <Specialties register={register} />
              <div className="mb-4">
                <label className="block text-sm font-medium mb-1">GPA</label>
                <input
                  {...register("gpa", { required: true })}
                  className="w-full px-3 py-2 border rounded-lg"
                  type="text"
                  required
                />
              </div>
              <div className="py-2">
                <p>
                  By clicking the Submit Application button, you agree to our{" "}
                  <Link
                    to="/terms-and-conditions"
                    className="underline text-secondary"
                  >
                    Terms & Conditions
                  </Link>{" "}
                  and{" "}
                  <Link
                    to="/privacy-policy"
                    className="underline text-secondary"
                  >
                    Privacy Policy
                  </Link>
                </p>
              </div>
              <div className="flex justify-end space-x-2">
                <button
                  type="button"
                  onClick={handleCloseModal}
                  className="px-4 py-2 bg-gray-200 rounded-lg"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 bg-secondary text-white rounded-lg"
                  disabled={loading}
                >
                  {loading ? "Submitting..." : "Submit"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default EligibilityCheck;



--- File: components\pages\HomePage\FeaturedUniversitiesSlider.jsx ---

import { useState, useEffect } from "react";
import api from "../../../app/api";
import { Link } from "react-router-dom";
import { useTranslation } from "react-i18next";

function FeaturedUniversitiesSlider() {
  const { t } = useTranslation();
  const [featuredUniversities, setFeaturedUniversities] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await api.get(`/universities/list/`, {
          params: {
            is_featured: true,
          },
        });
        setFeaturedUniversities(response.data.results);
      } catch (error) {
        console.error("Error fetching featured universities:", error);
      }
    };

    fetchData();
  }, []);

  return (
      <div className="w-full lg:px-20 px-4 py-10 bg-primary">
        <h2 className="text-2xl md:text-4xl">{t("Featured Universities")}</h2>
        <div className="flex flex-no-wrap gap-2 md:gap-4 w-full mt-10 overflow-x-auto pb-4">
          {featuredUniversities.map((university) => (
              <Link
                  key={university.id}
                  to={`/universities/${university.slug}/overview`}
                  className="relative flex-none shadow-md border border-gray-100 bg-white w-1/2 lg:w-1/5 rounded-lg"
              >
                <div className="relative overflow-hidden">
                  <img
                      src={university.image}
                      alt={university.name}
                      className="w-full h-48 object-cover rounded-t-lg"
                  />
                  {university.logo && (
                      <img
                          src={university.logo}
                          alt="University Logo"
                          className="absolute bottom-2 right-2 w-16 h-16 object-cover bg-white rounded-full border border-gray-200"
                      />
                  )}
                </div>
                <div className="p-4">
                  <h3 className="text-lg font-semibold mb-2">
                    {university.name}
                  </h3>
                  <p className="text-gray-600">{university.country.name}</p>
                </div>
              </Link>
          ))}
        </div>
      </div>
  );
}

export default FeaturedUniversitiesSlider;



--- File: components\pages\HomePage\FullScholarshipUniversitiesSlider.jsx ---

import { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { useTranslation } from "react-i18next";
import api from "../../../app/api";

function FullScholarshipUniversitiesSlider() {
  const { t } = useTranslation();
  const [fullScholarshipUniversities, setFullScholarshipUniversities] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await api.get(`/universities/list/`, {
          params: {
            full_scolarship: true,
          },
        });
        setFullScholarshipUniversities(response.data.results);
      } catch (error) {
        console.error("Error fetching full scholarship universities:", error);
      }
    };
    fetchData();
  }, []);

  return (
      <div className="overflow-hidden w-full lg:px-20 px-4 py-10 bg-primary">
        <h2 className="text-2xl md:text-4xl">
          {t("Full Scholarships Universities")}
        </h2>
        <div className="flex flex-no-wrap gap-2 md:gap-4 w-full mt-10 overflow-x-auto pb-4">
          {fullScholarshipUniversities.map((university) => (
              <Link
                  key={university.id}
                  to={`universities/${university.slug}/overview`}
                  className="relative flex-none shadow-md border border-gray-100 bg-white w-1/2 lg:w-1/5 rounded-lg"
              >
                <div className="relative overflow-hidden">
                  <img
                      src={university.image}
                      alt={university.name}
                      className="w-full h-48 object-cover rounded-t-lg"
                  />
                  {university.logo && (
                      <img
                          src={university.logo}
                          alt="University Logo"
                          className="absolute bottom-2 right-2 w-16 h-16 object-cover rounded-full border border-gray-200"
                      />
                  )}
                </div>
                <div className="p-4">
                  <h3 className="text-lg font-semibold mb-2">
                    {university.name}
                  </h3>
                  <p className="text-gray-600">{university.country.name}</p>
                </div>
              </Link>
          ))}
        </div>
      </div>
  );
}

export default FullScholarshipUniversitiesSlider;



--- File: components\pages\HomePage\Hero.jsx ---

import { useTranslation } from "react-i18next";
import { Link } from "react-router-dom";

import capImg from "../../../assets/images/illustrations/cap.webp";
import person1Img from "../../../assets/images/illustrations/person1.png";
import person2Img from "../../../assets/images/illustrations/person2.png";
import person3Img from "../../../assets/images/illustrations/person3.png";

const Hero = () => {
  const { t } = useTranslation();

  return (
      <section className="bg-primary relative overflow-hidden">
        <div className="max-w-[85rem] mx-auto px-4 sm:px-6 lg:px-8 py-10 lg:py-16">
          <div className="text-center mx-auto">
            <h2 className="text-4xl md:text-5xl lg:text-[88px] mt-5">
              {t("Find The")}
            </h2>

            <div className="flex justify-center items-center mt-8">
              <h2 className="font-semibold text-4xl md:text-5xl lg:text-[88px] ml-2">
                {t("Right")}
              </h2>
              <img
                  src={capImg}
                  alt="Cap"
                  className="w-12 md:w-16 lg:w-32 ml-4"
              />
              <h2 className="font-semibold text-4xl md:text-5xl lg:text-[88px] ml-2">
                {t("University")}
              </h2>
            </div>

            <div className="lg:flex lg:justify-center items-center mt-8">
              <div className="flex items-center">
                <h2 className="text-4xl md:text-5xl lg:text-[88px] md:ml-2 ml-10">
                  {t("For You")}
                </h2>
                <div className="flex ml-4 space-x-[-16px]">
                  <img src={person1Img} alt="Person 1" className="w-12 md:w-16 lg:w-24" />
                  <img src={person2Img} alt="Person 2" className="w-12 md:w-16 lg:w-24" />
                  <img src={person3Img} alt="Person 3" className="w-12 md:w-16 lg:w-24" />
                </div>
              </div>
              <h2 className="text-4xl md:text-5xl lg:text-[88px] ml-2 md:mt-0 mt-8">
                {t("Worldwide")}
              </h2>
            </div>

            <Link to="/universities">
              <button className="bg-secondary text-white px-20 py-2 rounded-md text-xl mt-10 hover:opacity-90">
                {t("Universities")}
              </button>
            </Link>
          </div>
        </div>
      </section>
  );
};

export default Hero;



--- File: components\pages\HomePage\QualificationLevels.jsx ---

import { Link } from "react-router-dom";
import { useTranslation } from "react-i18next";

const QualificationLevels = () => {

  const { t } = useTranslation();

  return (
    <div>
        <div className="max-w-[85rem] px-4  sm:px-6 lg:px-8  mx-auto">
          <div className="grid grid-cols-2 lg:grid-cols-3 gap-1">
            <div className="bg-white border shadow-sm rounded-xl p-4 flex justify-center items-center">
              <Link
                to={`/universities?country=&specialty=&qualification_level=diploma`}
                className="text-center"
              >
                {t("Diploma")}
              </Link>
            </div>
            <div className="bg-white border shadow-sm rounded-xl p-4 flex justify-center items-center">
              <Link
                to={`/universities?country=&specialty=&qualification_level=bachelor`}
                className="text-center"
              >
                {t("Bachelor's Degree")}
              </Link>{" "}
            </div>
            <div className="bg-white border shadow-sm rounded-xl p-4 flex justify-center items-center hidden lg:block text-center">
              <Link
                to={`/universities?country=&specialty=&qualification_level=master`}
                className="text-center"
              >
                {" "}
                {t("Master's Degree")}{" "}
              </Link>{" "}
            </div>
          </div>
          <div className="bg-white border shadow-sm rounded-xl p-4 flex justify-center items-center mt-2 lg:hidden">
            <Link
              to={`/universities?country=&specialty=&qualification_level=master`}
              className="text-center"
            >
              {t("Master's Degree")}
            </Link>
          </div>
        </div>
      )}
    </div>
  );
};

export default QualificationLevels;



--- File: components\pages\PathwayPage\PathwayAdvice.jsx ---

import { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import api from "../../../app/api";
import HtmlContentRenderer from "../../shared/HtmlContentRenderer.jsx";

const PathwayAdvice = () => {
    const { pathway } = useParams();
    const [advice, setAdvice] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchAdvice = async () => {
            try {
                const response = await api.get(`/article/${pathway}/detail/`);
                setAdvice(response.data);
            } catch (error) {
                console.error("Error fetching advice details:", error);
            } finally {
                setLoading(false);
            }
        };

        fetchAdvice();
    }, [pathway]);

    if (loading) {
        return (
            <div className="flex justify-center items-center h-screen">
                Loading...
            </div>
        );
    }

    if (!advice) {
        return (
            <div className="flex justify-center items-center h-screen">
                Advice not found.
            </div>
        );
    }

    return (
        <div className="max-w-3xl mx-auto py-8 px-4 min-h-[450px]">
            <h1 className="text-3xl font-bold mb-4">{advice.title}</h1>
            <p className="text-sm text-gray-500 mt-4">
                Published at: {new Date(advice.published_at).toLocaleDateString()}
            </p>
            {advice.image && (
                <img
                    src={advice.image}
                    alt={advice.title}
                    className="w-full h-auto mb-4"
                />
            )}
            <HtmlContentRenderer htmlContent={advice.content} />
        </div>
    );
};

export default PathwayAdvice;



--- File: components\pages\SearchPage\CountryFilter.jsx ---

import { useState, useEffect } from "react";
import api from "../../../app/api";
import { useTranslation } from "react-i18next";

const CountryFilter = ({ selectedCountry, handleCountryChange }) => {
  const [countries, setCountries] = useState([]);

  const { t } = useTranslation();

  useEffect(() => {
    const fetchCountries = async () => {
      try {
        const response = await api.get(`/common/countries/`, {
          params: {
            limit: 40,
          },
        });
        setCountries(response.data.results);
      } catch (error) {
        console.error("Error fetching countries: ", error);
      }
    };

    fetchCountries();
  }, []);

  const handleChange = (event) => {
    handleCountryChange(event.target.value);
  };

  return (
    <div className="mb-4">
      <h2 className="text-xl font-semibold mb-2">{t("Country")}:</h2>
      <div className="flex flex-wrap">
        <select
          value={selectedCountry}
          onChange={handleChange}
          className="p-2 w-full mb-2 md:hidden rounded-lg"
        >
          <option value="">All</option>
          {countries.map((country) => (
            <option key={country.id} value={country.id}>
              {country.name}
            </option>
          ))}
        </select>
        {/* Render radio buttons on larger screens */}
        <div className="hidden md:flex flex-wrap">
          <label className="inline-flex items-center mb-2 mr-4 w-full">
            <input
              type="radio"
              value=""
              checked={selectedCountry === ""}
              onChange={() => handleCountryChange("")}
              className="form-radio h-4 w-4 text-primary"
            />
            <span className="ml-2">{t("All")} </span>
          </label>
          {countries.map((country) => (
            <label
              key={country.id}
              className="inline-flex items-center mb-2 mr-4 w-full"
              style={{ whiteSpace: "nowrap" }}
            >
              <input
                type="radio"
                value={country.id}
                checked={selectedCountry === country.id}
                onChange={() => handleCountryChange(country.id)}
                className="form-radio h-4 w-4 text-primary"
              />
              <span className="ml-2">{country.name}</span>
            </label>
          ))}
        </div>
      </div>
    </div>
  );
};

export default CountryFilter;



--- File: components\pages\SearchPage\FilterOptions.jsx ---

import { useState, useEffect } from "react";
import api from "../../../app/api";

const formatQualificationLevel = (level) => {
  switch (level) {
    case "foundation":
      return "Foundation degree";
    case "certificate":
      return "Certificate";
    case "bachelor":
      return "Bachelor's degree";
    case "diploma":
      return "Diploma";
    case "master":
      return "Master's degree";
    case "undergraduate":
      return "Undergraduate";
    case "postgraduate":
      return "Postgraduate";
    default:
      return level;
  }
};

const FilterOptions = ({ paramName, labelText, onChange, selectedOption }) => {
  const [options, setOptions] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await api.get(`/universities/filters/`);
        setOptions(response.data[paramName]);
        setLoading(false);
      } catch (error) {
        console.error(`Error fetching ${paramName}: `, error);
      }
    };

    fetchData();
  }, [paramName]);

  const handleOptionChange = (event) => {
    onChange(event.target.value);
  };

  return (
    <div className="mb-4">
      <h2 className="text-xl font-semibold mb-2">{labelText}</h2>
      {loading ? (
        <p>Loading...</p>
      ) : (
        <div className="flex flex-wrap">
          {/* Render select element on mobile */}
          <select
            value={selectedOption}
            onChange={handleOptionChange}
            className="p-2 w-full mb-2 md:hidden rounded-lg"
          >
            <option value="">All</option>
            {options.map((option) => (
              <option key={option.id || option} value={option.id || option}>
                {formatQualificationLevel(option.name || option)}
              </option>
            ))}
          </select>
          {/* Render radio buttons on larger screens */}
          <div className="hidden md:flex flex-wrap">
            <label className="inline-flex items-center mr-4 mb-2 w-full">
              <input
                type="radio"
                value=""
                checked={!selectedOption}
                onChange={() => onChange("")}
                className="form-radio h-4 w-4 text-primary"
              />
              <span className="ml-2">All</span>
            </label>
            {options.map((option) => (
              <label
                key={option.id || option}
                className="inline-flex items-center mr-4 mb-2 w-full"
              >
                <div className="w-4 h-4">
                  <input
                    type="radio"
                    value={option.id || option}
                    checked={selectedOption === (option.id || option)}
                    onChange={() => onChange(option.id || option)}
                    className="form-radio h-4 w-4 text-primary"
                  />
                </div>
                <span className="ml-2">
                  {formatQualificationLevel(option.name || option)}
                </span>
              </label>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default FilterOptions;



--- File: components\pages\SearchPage\Filters.jsx ---

import { useState } from "react";
import CountryFilter from "./CountryFilter.jsx";
import FilterOptions from "./FilterOptions.jsx";
import { FiFilter } from "react-icons/fi";

const Filters = ({
  selectedCountry,
  handleCountryChange,
  selectedSpecialty,
  handleSpecialtyChange,
  selectedQualification,
  handleQualificationChange,
}) => {
  const [showFilters, setShowFilters] = useState(true);

  const toggleFilters = () => {
    setShowFilters((prevState) => !prevState);
  };

  return (
    <div className="bg-white rounded-t-lg  md:rounded-lg lg:w-1/4 w-full p-4 md:p-8 ">
      <button
        onClick={toggleFilters}
        className="md:hidden flex items-center float-right text-gray-900 focus:outline-none"
      >
        <FiFilter className="mr-2" /> Filter
      </button>
      {showFilters && (
        <>
          <div>
            <CountryFilter
              selectedCountry={selectedCountry}
              handleCountryChange={handleCountryChange}
            />
          </div>
          <div className="border-t border-gray-200 mt-4 pt-4">
            <FilterOptions
              paramName="specialties"
              labelText="Specialties:"
              onChange={handleSpecialtyChange}
              selectedOption={selectedSpecialty}
            />
          </div>
          <div className="border-t border-gray-200 mt-4 pt-4">
            <FilterOptions
              paramName="qualification_levels"
              labelText="Qualification Levels:"
              onChange={handleQualificationChange}
              selectedOption={selectedQualification}
            />
          </div>
        </>
      )}
    </div>
  );
};

export default Filters;



--- File: components\pages\SearchPage\UniversityList.jsx ---

import { useState, useEffect } from "react";
import { HiOutlineLocationMarker } from "react-icons/hi";
import { useLocation, useNavigate, Link } from "react-router-dom";
import api from "../../../app/api";
import Filters from "./Filters.jsx";
import Pagination from "../../shared/Pagination.jsx";
import inboxIcon from "../../../assets/images/icons/inbox.png";
import { useTranslation } from "react-i18next";

const UniversityList = () => {
  const { t } = useTranslation();
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const navigate = useNavigate();

  const [count, setCount] = useState(0);
  const [limit, setLimit] = useState(9);
  const [offset, setOffset] = useState(0);

  const [universities, setUniversities] = useState([]);
  const [selectedCountry, setSelectedCountry] = useState(
    queryParams.get("country") || ""
  );
  const [selectedSpecialty, setSelectedSpecialty] = useState(
    queryParams.get("specialty") || ""
  );
  const [selectedQualification, setSelectedQualification] = useState(
    queryParams.get("qualification_level") || ""
  );
  const [searchTerm, setSearchTerm] = useState(queryParams.get("search") || "");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchUniversities();
  }, [
    selectedCountry,
    selectedSpecialty,
    selectedQualification,
    searchTerm,
    limit,
    offset,
  ]);

  const fetchUniversities = async () => {
    try {
      const params = new URLSearchParams();

      if (selectedCountry) params.append("country", selectedCountry);
      if (selectedSpecialty) params.append("specialty", selectedSpecialty);
      if (selectedQualification)
        params.append("qualification_level", selectedQualification);
      if (searchTerm) params.append("search", searchTerm);

      params.append("limit", limit);
      params.append("offset", offset);
      queryParams.forEach((value, key) => {
        params.append(key, value);
      });

      const response = await api.get(
        `/universities/list/?${params.toString()}`
      );
      const data = response.data;
      setUniversities(data.results);
      setCount(data.count);
      setLoading(false);
    } catch (error) {
      console.error("Error fetching universities: ", error);
    }
  };

  const handleCountryChange = (countryId) => {
    setSelectedCountry(countryId);
    navigate(
      `?country=${countryId}&specialty=${selectedSpecialty}&qualification_level=${selectedQualification}`
    );
  };

  const handleSpecialtyChange = (specialtyId) => {
    setSelectedSpecialty(specialtyId);
    navigate(
      `?country=${selectedCountry}&specialty=${specialtyId}&qualification_level=${selectedQualification}`
    );
  };

  const handleQualificationChange = (qualification) => {
    setSelectedQualification(qualification);
    navigate(
      `?country=${selectedCountry}&specialty=${selectedSpecialty}&qualification_level=${qualification}`
    );
  };

  const handleSearchChange = (event) => {
    const value = event.target.value;
    setSearchTerm(value);
    navigate(
      `?country=${selectedCountry}&specialty=${selectedSpecialty}&qualification_level=${selectedQualification}&search=${value}`
    );
  };

  const handlePageChange = (newOffset) => {
    setOffset(newOffset);
  };

  const totalPages = Math.ceil(count / limit);
  const currentPage = Math.floor(offset / limit) + 1;

  const goToNextPage = () => {
    const nextOffset = offset + limit;
    setOffset(nextOffset);
  };

  const goToPreviousPage = () => {
    const previousOffset = Math.max(offset - limit, 0);
    setOffset(previousOffset);
  };

  return (
    <div>
      <div className="flex justify-center">
        <input
          type="search"
          value={searchTerm}
          onChange={handleSearchChange}
          placeholder="Search for a college or university..."
          className="w-[768px] mx-4 my-8 px-4 py-2 rounded-xl border border-gray-300 focus:outline-none focus:border-blue-500"
        />
      </div>
      <div className="flex flex-wrap lg:flex-nowrap lg:px-32 px-4 py-4">
        <Filters
          selectedCountry={selectedCountry}
          handleCountryChange={handleCountryChange}
          selectedSpecialty={selectedSpecialty}
          handleSpecialtyChange={handleSpecialtyChange}
          selectedQualification={selectedQualification}
          handleQualificationChange={handleQualificationChange}
        />

        <div className="container mx-auto max-w-6xl bg-white py-0 md:py-4 md:rounded-lg lg:ml-5 lg:mt-0 h-fit">
          {loading ? (
            <p>Loading...</p>
          ) : universities.length === 0 ? (
            <div className="flex flex-col items-center justify-center">
              <img
                src={inboxIcon}
                alt="No results"
                className="w-24 h-24 mb-4"
              />
              <p>No universities found.</p>
            </div>
          ) : (
            <div className="lg:px-4">
              {universities.map((university) => (
                <div
                  key={university.id}
                  className="bg-white flex flex-col sm:flex-row w-full mx-auto border-t-2 border-gray-200 px-5"
                >
                  <div className="sm:w-48 sm:h-36 sm:object-cover my-4">
                    <img
                      src={university.image}
                      alt={university.name}
                      className="w-full h-full object-cover rounded-lg"
                    />
                  </div>
                  <div className="p-4 flex flex-col justify-between sm:ml-4">
                    <div>
                      <div className="flex items-center justify-between lg:w-[640px]">
                        <h2 className="text-4xl font-semibold mb-2">
                          {university.name}
                        </h2>
                        <div className="flex">
                          <div>
                            {university.is_featured && (
                              <p className="bg-primary text-secondary px-2 py-1 rounded-lg flex items-center">
                                <span>â¢</span>{" "}
                                <span className="ml-1">{t("Featured")}</span>
                              </p>
                            )}
                          </div>
                          <div className="ml-2">
                            {university.full_scolarship && (
                              <p className="bg-primary text-secondary px-2 py-1 rounded-lg flex items-center">
                                <span>â¢</span>{" "}
                                <span className="ml-1">{t("Free")}</span>
                              </p>
                            )}
                          </div>
                        </div>
                      </div>
                      <p className="text-black mb-2 flex items-center text-base">
                        <HiOutlineLocationMarker /> {university.country.name}
                      </p>
                    </div>
                    <div className="flex">
                      <Link
                        to={`${university.slug}/overview`}
                        className="w-fit p-2 rounded-md bg-secondary text-white"
                      >
                        {t("Learn more")}
                      </Link>
                      <Link
                        to={`${university.slug}/courses?qualification_level=${selectedQualification}&specialty=${selectedSpecialty}`}
                        className="border w-fit p-2 rounded-md border-secondary text-secondary ml-2"
                      >
                        {university.course_count} {t("courses available ")}
                      </Link>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

          <Pagination
            totalPages={totalPages}
            currentPage={currentPage}
            limit={limit}
            selectedCountry={selectedCountry}
            selectedSpecialty={selectedSpecialty}
            selectedQualification={selectedQualification}
            searchTerm={searchTerm}
            handlePageChange={handlePageChange}
            goToNextPage={goToNextPage}
            goToPreviousPage={goToPreviousPage}
          />
        </div>
      </div>
    </div>
  );
};

export default UniversityList;



--- File: components\pages\UniversityPage\ApplyModal.jsx ---

import { useState, useEffect } from "react";
import api from "../../../app/api";
import toast, { Toaster } from "react-hot-toast";
import { Link } from "react-router-dom";

function ApplyModal({ isOpen, onClose, universityId, courseId }) {
  const [formData, setFormData] = useState({
    university: universityId,
    course: courseId,
    first_name: "",
    last_name: "",
    age: "",
    phone_number: "",
    email: "",
    gender: "",
    region: null,
  });

  const [regions, setRegions] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    const fetchRegions = async () => {
      try {
        const response = await api.get("/common/regions/", {
          params: { limit: 20 },
        });
        setRegions(response.data.results);
      } catch (error) {
        console.error("Error fetching regions:", error);
        setLoading(false);
      }
    };

    fetchRegions();
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
      const updatedFormData = {
        ...formData,
        university: universityId,
        course: courseId,
      };
      await api.post("/applications/create/", updatedFormData);
      setLoading(false);
      setFormData({
        university: "",
        course: "",
        first_name: "",
        last_name: "",
        age: "",
        phone_number: "",
        email: "",
        gender: "",
        region: null,
      });

      onClose();
      toast.success("Application submitted!");
    } catch (error) {
      console.error("Error submitting application:", error);
      setLoading(false);
    }
  };

  return (
    <div
      className={`fixed top-0 left-0 w-full h-full flex items-center justify-center z-50 ${
        isOpen ? "block" : "hidden"
      }`}
    >
      <Toaster position="top-center" />

      <div className="absolute w-full h-full bg-gray-900 opacity-50"></div>
      <div className="bg-white w-96 mx-auto p-4 rounded-lg shadow-lg z-50 relative">
        <button className="absolute top-4 right-4" onClick={onClose}>
          <svg
            className="w-6 h-6 text-gray-900 cursor-pointer"
            fill="none"
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
        <h2 className="text-xl font-semibold mb-4">Apply to Course</h2>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <input
              type="text"
              name="first_name"
              value={formData.first_name}
              onChange={handleChange}
              placeholder="First Name"
              className="w-full px-3 py-2 rounded border border-gray-400 focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              required
            />
          </div>
          <div className="mb-4">
            <input
              type="text"
              name="last_name"
              value={formData.last_name}
              onChange={handleChange}
              placeholder="Last Name"
              className="w-full px-3 py-2 rounded border border-gray-400 focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              required
            />
          </div>
          <div className="mb-4">
            <input
              type="number"
              name="age"
              value={formData.age}
              onChange={handleChange}
              placeholder="Age"
              className="w-full px-3 py-2 rounded border border-gray-400 focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              required
            />
          </div>
          <div className="mb-4">
            <input
              type="tel"
              name="phone_number"
              value={formData.phone_number}
              onChange={handleChange}
              placeholder="Phone Number"
              className="w-full px-3 py-2 rounded border border-gray-400 focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              required
            />
          </div>
          <div className="mb-4">
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="Email"
              className="w-full px-3 py-2 rounded border border-gray-400 focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
            />
          </div>
          <div className="mb-4">
            <select
              name="gender"
              value={formData.gender}
              onChange={handleChange}
              className="w-full px-3 py-2 rounded border border-gray-400 focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              required
            >
              <option value="">Select Gender</option>
              <option value="male">Male</option>
              <option value="female">Female</option>
            </select>
          </div>
          <div className="mb-4">
            <select
              name="region"
              value={formData.region}
              onChange={handleChange}
              className="w-full px-3 py-2 rounded border border-gray-400 focus:border-indigo-500 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              required
            >
              <option value="">Select Region</option>
              {regions.map((region) => (
                <option key={region.id} value={region.id}>
                  {region.name}
                </option>
              ))}
            </select>
          </div>
          <div className="py-2">
            <p>
              By clicking the Submit Application button, you agree to our{" "}
              <Link
                to="/terms-and-conditions"
                className="underline text-secondary"
              >
                Terms & Conditions
              </Link>{" "}
              and{" "}
              <Link to="/privacy-policy" className="underline text-secondary">
                Privacy Policy
              </Link>
            </p>
          </div>
          <button
            type="submit"
            className="w-full bg-secondary text-white px-4 py-2 rounded hover:bg-blue-800 focus:outline-none focus:bg-indigo-600"
          >
            {loading ? "Submitting..." : "Submit Application"}
          </button>
        </form>
      </div>
    </div>
  );
}

export default ApplyModal;



--- File: components\pages\UniversityPage\UniversityCourses.jsx ---

import { useState, useEffect } from "react";
import api from "../../../app/api";
import { useLocation, useParams } from "react-router-dom";
import ApplyModal from "./ApplyModal.jsx";
import UniversityTitle from "./UniversityTitle.jsx";
import { useTranslation } from "react-i18next";

function UniversityCourses() {
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const lang = localStorage.getItem("i18nextLng");
  const { t } = useTranslation();

  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedCourse, setSelectedCourse] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [qualifications, setQualifications] = useState([]);
  const [subjects, setSubjects] = useState([]);
  const [selectedQualification, setSelectedQualification] = useState(
    queryParams.get("qualification_level") || ""
  );
  const [selectedSubject, setSelectedSubject] = useState(
    queryParams.get("specialty") || ""
  );

  const { universityName } = useParams();

  const [universityId, setUniversityId] = useState(null);

  useEffect(() => {
    const fetchUniversityCourses = async () => {
      try {
        const response = await api.get(
          `/universities/${universityName}/courses/`,
          {
            headers: {
              "Accept-Language": lang,
            },
            params: {
              specialty: selectedSubject,
              qualification_level: selectedQualification,
            },
          }
        );
        setCourses(response.data.results);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching university courses:", error);
        setLoading(false);
      }
    };

    fetchUniversityCourses();
  }, [universityName, selectedQualification, selectedSubject]);

  useEffect(() => {
    const fetchFilters = async () => {
      try {
        const response = await api.get(`/universities/filters/`, {
          headers: {
            "Accept-Language": lang,
          },
          params: {
            university: universityId,
          },
        });
        setQualifications(response.data.qualification_levels);
        setSubjects(response.data.specialties);
      } catch (error) {
        console.error("Error fetching filters:", error);
      }
    };

    if (universityId) {
      fetchFilters();
    }
  }, [universityId]);

  const handleApply = (courseId) => {
    setSelectedCourse(courseId);
    setIsModalOpen(true);
  };

  const handleQualificationChange = (e) => {
    const qualificationValue = e.target.value;
    setSelectedQualification(qualificationValue);
    queryParams.set("qualification_level", qualificationValue);

    if (selectedSubject !== "") {
      queryParams.set("specialty", selectedSubject);
    }

    window.history.replaceState({}, "", `${location.pathname}?${queryParams}`);
  };

  const handleSubjectChange = (e) => {
    const subjectValue = e.target.value;
    setSelectedSubject(subjectValue);
    queryParams.set("specialty", subjectValue);

    if (selectedQualification !== "") {
      queryParams.set("qualification_level", selectedQualification);
    }

    window.history.replaceState({}, "", `${location.pathname}?${queryParams}`);
  };

  const updateUniversityId = (id) => {
    setUniversityId(id);
  };

  const formatQualificationLevel = (level) => {
    switch (level) {
      case "foundation":
        return "Foundation degree";
      case "certificate":
        return "Certificate";
      case "bachelor":
        return "Bachelor's degree";
      case "diploma":
        return "Diploma";
      case "master":
        return "Master's degree";
      case "undergraduate":
        return "Undergraduate";
      case "postgraduate":
        return "Postgraduate";
      default:
        return level;
    }
  };

  const studyTypeNames = {
    full_time: "Full-time",
    part_time: "Part-time",
    distance: "Distance",
  };

  return (
    <>
      <div className="max-w-4xl mx-auto">
        <UniversityTitle
          slug={universityName}
          onUniversityIdChange={updateUniversityId}
        />
        <h2 className="text-2xl font-semibold mb-4">{t("Courses Offered")}</h2>
        <div className="flex justify-end mb-4 items-center">
          <p className="mr-2">Filter by</p>
          <div className="pr-2">
            <select
              value={selectedQualification}
              onChange={handleQualificationChange}
              className="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-2xl shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            >
              <option value="">All</option>
              {qualifications.map((qualification) => (
                <option key={qualification} value={qualification}>
                  {formatQualificationLevel(qualification)}
                </option>
              ))}
            </select>
          </div>
          <div className="pl-2">
            <select
              value={selectedSubject}
              onChange={handleSubjectChange}
              className="mt-1 block w-full py-2 px-3 border border-gray-300 bg-white rounded-2xl shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            >
              <option value="">All</option>
              {subjects.map((subject) => (
                <option key={subject.id} value={subject.id}>
                  {subject.name}
                </option>
              ))}
            </select>
          </div>
        </div>
        {loading ? (
          <p>Loading...</p>
        ) : (
          <ul>
            {courses.length === 0 ? (
              <p>No courses available</p>
            ) : (
              courses.map((course) => (
                <li
                  key={course.id}
                  className="border-2 border-gray-100 rounded-xl bg-white p-4 mb-4"
                >
                  <h3 className="text-lg font-semibold">{course.name}</h3>
                  <div className="flex justify-between mt-2">
                    <div>
                      <h4 className="font-semibold text-secondary">
                        {t("Duration")}
                      </h4>
                      <p>
                        {Number.isInteger(parseFloat(course.duration))
                          ? parseFloat(course.duration) % 1 === 0
                            ? parseFloat(course.duration)
                            : parseFloat(course.duration).toFixed(1)
                          : course.duration}{" "}
                        years
                      </p>
                    </div>
                    <div>
                      <h4 className="font-semibold text-secondary">
                        {t("Study Type")}
                      </h4>
                      <p>{studyTypeNames[course.study_type]}</p>
                    </div>
                    <div>
                      <h4 className="font-semibold text-secondary">
                        {t("Tuition Fee")}
                      </h4>
                      <p>
                        $ {parseFloat(course.tuition_fee).toLocaleString()} per
                        year
                      </p>
                    </div>
                  </div>
                  <div className="">
                    <p className="font-semibold text-secondary">
                      {t("Intake Months")}
                    </p>
                    <div className="md:block grid grid-cols-3 py-1">
                      {course.intake_months.map((month, index) => (
                        <span
                          key={index}
                          className="mr-2 border border-black rounded p-1 text-center"
                        >
                          {month.charAt(0).toUpperCase() + month.slice(1)}
                        </span>
                      ))}
                    </div>
                  </div>
                  <button
                    className="bg-secondary hover:bg-blue-800 text-white py-2 px-8 rounded-lg mt-2"
                    onClick={() => handleApply(course.id)}
                  >
                    {t("Apply Now")}
                  </button>
                </li>
              ))
            )}
          </ul>
        )}
      </div>
      <ApplyModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        universityId={universityId}
        courseId={selectedCourse}
      />
    </>
  );
}

export default UniversityCourses;



--- File: components\pages\UniversityPage\UniversityOverview.jsx ---

import { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import { useTranslation } from "react-i18next";
import axios from "../../../app/api.js";
import HtmlContentRenderer from "../../shared/HtmlContentRenderer.jsx";
import { HiOutlineLocationMarker } from "react-icons/hi";
import { BsFillHouseFill, BsFillHouseXFill } from "react-icons/bs";
import { Link } from "react-router-dom";

function UniversityOverview({ slug }) {
  const [universityData, setUniversityData] = useState(null);
  const [loading, setLoading] = useState(true);
  const { t } = useTranslation();

  const { universityName } = useParams();
  const lang = localStorage.getItem("i18nextLng");

  useEffect(() => {
    const fetchUniversityData = async () => {
      try {
        const response = await axios.get(
          `/universities/${universityName}/detail/`,
          {
            headers: {
              "Accept-Language": lang,
            },
          }
        );
        setUniversityData(response.data);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching university data:", error);
        setLoading(false);
      }
    };

    fetchUniversityData();
  }, [slug, universityName, lang]);

  if (loading) {
    return <p>Loading...</p>;
  }

  if (!universityData) {
    return <p>Error: Unable to fetch university data.</p>;
  }

  return (
    <div className="max-w-4xl mx-auto">
      <h1 className="text-3xl font-semibold mb-4">{universityData.name}</h1>
      <div className="flex items-center mb-4">
        <HiOutlineLocationMarker />
        <p className="text-gray-600 ml-2">{universityData.country.name}</p>
      </div>

      <div className="relative">
        <img
          src={universityData.image}
          className="w-full h-[500px] object-cover rounded-lg mb-4"
          alt=""
        />
        <img
          src={universityData.logo}
          alt={universityData.name}
          className="absolute bottom-0 left-0 w-28 rounded-lg h-auto mb-2 ml-2"
        />
      </div>
      <div className="bg-white px-6 py-8 rounded-lg mb-4">
        <h3 className="text-3xl font-bold mb-6">{t("About")}</h3>
        <HtmlContentRenderer htmlContent={universityData.about} />
      </div>
      <div className="bg-white rounded-lg px-6 py-8 mb-4">
        <h3 className="text-3xl font-bold mb-6">{t("Overview")}</h3>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <h2 className="text-lg font-semibold mb-2">
              {t("Establishment Year")}
            </h2>
            <p>{universityData.establishment_year}</p>
          </div>
          <div>
            <h2 className="text-lg font-semibold mb-2">
              {t("Institution Type")}
            </h2>
            <p>{universityData.institution_type}</p>
          </div>
          <div>
            <h2 className="text-lg font-semibold mb-2">
              {t("Students Count")}
            </h2>
            <p>{universityData.students_count}</p>
          </div>
          <div>
            <h2 className="text-lg font-semibold mb-2">{t("Address")}</h2>
            <p>{universityData.address}</p>
          </div>
        </div>
      </div>
      <div className="bg-white rounded-lg px-6 py-8 mb-4">
        <h3 className="text-3xl font-bold mb-6">{t("Admissions")} </h3>

        <div className="grid grid-cols-3 lg:grid-cols-6 mt-4">
          {[
            "january",
            "february",
            "march",
            "april",
            "may",
            "june",
            "july",
            "august",
            "september",
            "october",
            "november",
            "december",
          ].map((month, index) => (
            <span
              key={index}
              className={`mr-2 mb-2 p-2 rounded-lg  ${
                universityData.intake_months.includes(month)
                  ? "bg-secondary text-white"
                  : "bg-white text-black border border-gray-900"
              }`}
            >
              {month.charAt(0).toUpperCase() + month.slice(1)}
            </span>
          ))}
        </div>
      </div>
      <div className="bg-white rounded-lg px-6 py-8 mb-4">
        <h3 className="text-3xl font-bold mb-6">
          {t("Tuition and application fees")}
        </h3>
        <div className="flex flex-col md:flex-row">
          <div className="bg-blue-50 rounded-lg p-4 lg:w-1/2">
            <p className="font-bold text-xl">
              {universityData.tuition_fee} per year
            </p>
            <p>
              {t(
                "The tuition fee might be outdated, please confirm it with the consultant."
              )}
            </p>
          </div>
          <div className="p-4 lg:w-1/2 flex justify-around">
            <div>
              <p className="font-semibold">{t("Application fee")}</p>
              <p>{universityData.application_fee}</p>
            </div>

            <div>
              <p className="font-semibold">{t("Visa fee")}</p>
              <p>{universityData.visa_fee}</p>
            </div>
          </div>
        </div>
        <div>
          <h3 className="text-3xl font-bold my-6 ">{t("Living cost")}</h3>
          <div className="flex justify-between items-center flex-col md:flex-row">
            <div className="bg-blue-50 rounded-lg p-4 lg:w-1/2">
              <p className="font-bold text-xl">
                {universityData.living_cost} per month
              </p>
              <p>Average living cost in {universityData.country.name}</p>
              <p className="mt-2">
                {t(
                  "The amount is indicated taking into account the average cost of food, accommodation, etc in"
                )}{" "}
                {universityData.country.name} {t("for 2024")}
              </p>
            </div>
            <div className="p-4 lg:w-1/2 flex justify-around items-center">
              <div>
                <p className="font-semibold">{t("Dormitory")}</p>
                <p>{universityData.has_dormitory ? "Yes" : "No"}</p>
              </div>
              <div className="ml-12">
                {universityData.has_dormitory ? (
                  <BsFillHouseFill size={50} />
                ) : (
                  <BsFillHouseXFill />
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
      <div className="bg-white rounded-lg px-6 py-8">
        <h3 className="text-3xl font-bold mb-6">
          {t("Courses available")}
          <span className="bg-blue-50 p-2 rounded-lg ml-2 text-xl">
            {universityData.specialties.total_courses}
          </span>
        </h3>
        <ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-4">
          {universityData.specialties.data.map((specialty) => (
            <li key={specialty.id} className="">
              <div className="flex items-center">
                <Link
                  to={`/universities/${universityName}/courses?specialty=${specialty.id}&qualification_level=`}
                  className="text-base font-semibold bg-blue-50 p-2 rounded-lg"
                >
                  {specialty.name}
                </Link>
                <p className="ml-2">{specialty.course_count}</p>
              </div>
            </li>
          ))}
        </ul>
      </div>

      <p>{universityData.required_documents.document_type}</p>
      <p>{universityData.required_documents.description}</p>
    </div>
  );
}

export default UniversityOverview;



--- File: components\pages\UniversityPage\UniversityTitle.jsx ---

import { useState, useEffect } from "react";
import axios from "../../../app/api.js";
import { HiOutlineLocationMarker } from "react-icons/hi";

const UniversityTitle = ({ slug, onUniversityIdChange }) => {
  const [universityData, setUniversityData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchUniversityData = async () => {
      try {
        const response = await axios.get(`/universities/${slug}/detail/`);
        setUniversityData(response.data);
        onUniversityIdChange(response.data.id);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching university data:", error);
        setLoading(false);
      }
    };

    fetchUniversityData();
  }, [slug, onUniversityIdChange]);

  if (loading) {
    return <p>Loading...</p>;
  }

  return (
    <div className="max-w-4xl mx-auto">
      <div className="mb-4">
        <h1 className="text-3xl font-semibold mb-4">{universityData.name}</h1>
        <div className="flex items-center">
          <HiOutlineLocationMarker />
          <p className="text-gray-600 ml-2">{universityData.country.name}</p>
        </div>
      </div>
    </div>
  );
};

export default UniversityTitle;



--- File: components\shared\CountrySelector.jsx ---

import { useState, useEffect } from "react";
import axios from "../../app/api.js";

const CountrySelector = ({ onSelect }) => {
  const [countries, setCountries] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchCountries = async () => {
      try {
        const response = await axios.get(`/common/countries/?limit=50`);
        setCountries(response.data.results);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching countries: ", error);
      }
    };

    fetchCountries();
  }, []);

  return (
    <div className="">
      {loading ? (
        <p>Loading Countries...</p>
      ) : (
        <select
          onChange={(e) => onSelect(e.target.value)}
          className="border border-gray-300 rounded-md py-2 px-3 mt-1 w-full"
        >
          <option value="">Select a country</option>
          {countries.map((country) => (
            <option key={country.id} value={country.id}>
              {country.name}
            </option>
          ))}
        </select>
      )}
    </div>
  );
};

export default CountrySelector;



--- File: components\shared\HtmlContentRenderer.jsx ---

const HtmlContentRenderer = ({ htmlContent }) => {
  return (
    <div
      className="mb-4"
      dangerouslySetInnerHTML={{ __html: htmlContent }}
    ></div>
  );
};

export default HtmlContentRenderer;



--- File: components\shared\Pagination.jsx ---

import { Link } from "react-router-dom";
import { HiArrowLongRight, HiArrowLongLeft } from "react-icons/hi2";
import { useTranslation } from "react-i18next";

const Pagination = ({
  totalPages,
  currentPage,
  limit,
  selectedCountry,
  selectedSpecialty,
  selectedQualification,
  searchTerm,
  handlePageChange,
  goToNextPage,
  goToPreviousPage,
}) => {
  const { t } = useTranslation();

  return (
    <div className="pt-6 border-t-2 mx-4 py-8">
      {totalPages > 1 && (
        <ul className="flex justify-center">
          <li>
            <button
              onClick={goToPreviousPage}
              disabled={currentPage === 1}
              className="mx-1 px-2 flex items-center"
            >
              <HiArrowLongLeft className="mr-2" /> {t("Previous")}
            </button>
          </li>
          {[...Array(totalPages).keys()].map((pageNumber) => (
            <li key={pageNumber} className="mx-1">
              <Link
                to={`?country=${selectedCountry}&specialty=${selectedSpecialty}&qualification_level=${selectedQualification}&search=${searchTerm}&limit=${limit}&offset=${
                  pageNumber * limit
                }`}
                onClick={() => handlePageChange(pageNumber * limit)}
                className={`p-3${
                  pageNumber + 1 === currentPage
                    ? " border-t-2 border-secondary text-secondary"
                    : ""
                }`}
              >
                {pageNumber + 1}
              </Link>
            </li>
          ))}
          <li>
            <button
              onClick={goToNextPage}
              disabled={currentPage === totalPages}
              className="mx-1 px-2 flex items-center"
            >
              {t("Next")} <HiArrowLongRight className="ml-2" />
            </button>
          </li>
        </ul>
      )}
    </div>
  );
};

export default Pagination;



--- File: components\shared\RegionSelector.jsx ---

import { useState, useEffect } from "react";
import axios from "../../app/api.js";

const RegionSelector = ({ onSelect }) => {
  const [regions, setRegions] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchRegions = async () => {
      try {
        const response = await axios.get(`/common/regions/?limit=20`);
        setRegions(response.data.results);
        setLoading(false);
      } catch (error) {
        console.error("Error fetching regions: ", error);
      }
    };

    fetchRegions();
  }, []);

  return (
    <div className="">
      {loading ? (
        <p>Loading regions...</p>
      ) : (
        <select
          onChange={(e) => onSelect(e.target.value)}
          className="border border-gray-300 rounded-md py-2 px-3 mt-1 w-full"
        >
          <option value="">Select a region</option>
          {regions.map((region) => (
            <option key={region.id} value={region.id}>
              {region.name}
            </option>
          ))}
        </select>
      )}
    </div>
  );
};

export default RegionSelector;



--- File: components\shared\Specialties.jsx ---

import { useEffect, useState } from "react";
import axios from "../../app/api.js";

const Specialties = ({ register }) => {
  const [specialties, setSpecialties] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchSpecialties = async () => {
      try {
        const response = await axios.get(`/universities/filters/`);
        setSpecialties(response.data.specialties);
      } catch (err) {
        setError("Failed to load specialties. Please try again.");
      } finally {
        setLoading(false);
      }
    };

    fetchSpecialties();
  }, []);

  if (loading) return <p>Loading specialties...</p>;
  if (error) return <p>{error}</p>;

  return (
    <div className="mb-4">
      <label className="block text-sm font-medium mb-1">Needed Specialty</label>
      <select
        {...register("needed_specialty", { required: true })}
        className="w-full px-3 py-2 border rounded-lg"
        required
      >
        {specialties.map((specialty) => (
          <option key={specialty.id} value={specialty.id}>
            {specialty.name}
          </option>
        ))}
      </select>
    </div>
  );
};

export default Specialties;



--- File: index.css ---

@import url("https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  font-family: "Lato", sans-serif;
}



--- File: main.jsx ---

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import "./index.css";
import { BrowserRouter } from "react-router-dom";
import { I18nextProvider } from "react-i18next";
import i18n from "./app/i18n.js"

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <BrowserRouter>
    <I18nextProvider i18n={i18n}>
      <App />      
      </I18nextProvider>
    </BrowserRouter>
  </React.StrictMode>
);



--- File: pages\HomePage.jsx ---

import Hero from "../components/pages/HomePage/Hero.jsx";
import Countries from "../components/pages/HomePage/Countries.jsx";
import AdvisorApplication from "../components/pages/HomePage/AdvisorApplication";
import QualificationLevels from "../components/pages/HomePage/QualificationLevels";
import AssistanceCards from "../components/pages/HomePage/AssistanceCards.jsx";
import FeaturedUniversitiesSlider from "../components/pages/HomePage/FeaturedUniversitiesSlider.jsx";
import FullScholarshipUniversitiesSlider from "../components/pages/HomePage/FullScholarshipUniversitiesSlider.jsx";
import CareerCompass from "../components/pages/HomePage/CareerCompass.jsx";
import EligibilityCheck from "../components/pages/HomePage/EligibilityCheck.jsx";

const HomePage = () => {
  return (
    <div>
        <Hero />
        <Countries />
        <QualificationLevels />
        <AssistanceCards />
        <AdvisorApplication />
        <CareerCompass />
        <EligibilityCheck />
        <FeaturedUniversitiesSlider />
        <FullScholarshipUniversitiesSlider />
    </div>
  );
};

export default HomePage;



--- File: pages\SearchPage.jsx ---

import UniversityList from "../components/pages/SearchPage/UniversityList.jsx";
import { useTranslation } from "react-i18next";

const SearchPage = () => {
  const { t } = useTranslation();
  return (
    <div>
      <h2 className="text-center text-3xl pt-10">
        {t("2024 best universities Worldwide")}
      </h2>

      <UniversityList />
    </div>
  );
};

export default SearchPage;



--- File: pages\UniversityPage.jsx ---

import { useParams, Outlet, Link } from "react-router-dom";
import { useTranslation } from "react-i18next";

const UniversityPage = () => {
  const { universityName } = useParams();
  const { t } = useTranslation();

  const url = window.location.href;

  const urlAfterUniversity = url.split(`${universityName}/`)[1];

  const firstWordAfterUniversityName = urlAfterUniversity.split("?")[0];

  return (
    <div className="min-h-[calc(100vh-220px)] bg-[#DFDFEC] -mt-4 py-10 px-4">
      <div className="flex justify-center my-4">
        <Link
          to={`/universities/${universityName}/overview`}
          className={`mx-2 px-4 py-2 ${
            firstWordAfterUniversityName === "overview"
              ? "border-b-4 border-secondary"
              : ""
          }`}
        >
          {t("Overview")}
        </Link>
        <Link
          to={`/universities/${universityName}/courses`}
          className={`mx-2 px-4 py-2 ${
            firstWordAfterUniversityName === "courses"
              ? "border-b-4 border-secondary"
              : ""
          }`}
        >
          {t("Courses")}
        </Link>
      </div>
      <Outlet />
    </div>
  );
};

export default UniversityPage;



--- File: translations\translations.json ---

{
  "en": {
    "translation": {
      "Find The": "Find The",
      "Right": "Right",
      "University": "University",
      "For You": "For You",
      "Worldwide": "Worldwide",
      "How UniWorld Can Help You": "How UniWorld Can Help You",
      "Our team of advisors is ready to support you at every step of your study abroad journey": "Our team of advisors is ready to support you at every step of your study abroad journey",
      "About us": "About us",
      "Universities": "Universities",
      "Visa & Travel Advice": "Visa & Travel Advice",
      "Get help after application, all the way to your first day at university.": "Get help after application, all the way to your first day at university.",
      "Application Guidance": "Application Guidance",
      "We'll get you to the right place to start your application.": "We'll get you to the right place to start your application.",
      "Find your best matches": "Find your best matches",
      "See programs that best match your eligibility and aspirations.": "See programs that best match your eligibility and aspirations.",
      "Speak to Advisor": "Speak to Advisor",
      "Featured Universities": "Featured Universities",
      "Full Scholarships Universities": "Full Scholarships Universities",
      "One Click to Your Dream University": "One Click to Your Dream University",
      "2024 All rights reserved.": "2024 All rights reserved.",
      "2024 best universities Worldwide": "2024 best universities Worldwide",
      "Country": "Country",
      "All": "All",
      "Overview": "Overview",
      "Courses": "Courses",
      "Diploma": "Diploma"
    }
  },
  "uz": {
    "translation": {
      "Find The": "O'zingizga",
      "Right": "Mos",
      "University": "Universitetni",
      "For You": "Biz bilan",
      "Worldwide": "toping",
      "How UniWorld Can Help You": "Biz sizga qanday yordam bera olamiz",
      "Our team of advisors is ready to support you at every step of your study abroad journey": "Bizning maslahatchilarimiz chet elda o'qish yo'lingizning har bir bosqichida sizni qo'llab-quvvatlashga tayyor",
      "About us": "Biz haqimizda",
      "Universities": "Universitetlar",
      "Visa & Travel Advice": "Viza va sayohat bo'yicha maslahat",
      "Get help after application, all the way to your first day at university.": "Universitetdagi birinchi kuningizgacha ariza topshirganingizdan keyin yordam oling.",
      "Application Guidance": "Ariza bo'yicha yo'riqnoma",
      "We'll get you to the right place to start your application.": "Biz sizni arizangizni boshlash uchun kerakli joyga olib boramiz.",
      "Find your best matches": "Eng yaxshi mosliklaringizni toping",
      "See programs that best match your eligibility and aspirations.": "Muvofiqligingiz va intilishlaringizga eng mos keladigan dasturlarni ko'ring.",
      "Speak to Advisor": "Maslahatchi bilan gaplashing",
      "Featured Universities": "Tanlangan universitetlar",
      "Full Scholarships Universities": "To'liq stipendiyalik universitetlar",
      "One Click to Your Dream University": "Orzuingizdagi universitetga bir qadam",
      "2024 All rights reserved.": "2024 Barcha huquqlar himoyalangan.",
      "2024 best universities Worldwide": "2024-yildagi eng yaxshi universitetlar",
      "Country": "Davlat",
      "All": "Hammasi",
      "Overview": "Umumiy ma'lumot",
      "Courses": "Kurslar",
      "Diploma": "Diplom",
      "Bachelor's Degree": "Bakalavr",
      "Master's Degree": "Magistratura",
      "Apply Now": "Ariza yuborish",
      "Intake Months": "Qabul qilish oylari",
      "Tuition Fee": "O'qish to'lovi",
      "Study Type": "O'quv turi",
      "Duration": "Davomiyligi",
      "Courses Offered": "Taklif etilgan kurslar",
      "About": "Universitet haqida",
      "Establishment Year": "Tashkil etilgan yili",
      "Institution Type": "Tashkilot turi",
      "Students Count": "Talabalar soni",
      "Address": "Manzil",
      "Admissions": "Qabul oylari",
      "Tuition and application fees": "O'qish va ariza to'lovlari",
      "The tuition fee might be outdated, please confirm it with theconsultant.": "O'quv to'lovi eskirgan bo'lishi mumkin, iltimos buni maslahatchi bilan tasdiqlang.",
      "Application fee": "Ariza toÊ»lovi",
      "Living cost": "Yashash narxi",
      "The amount is indicated taking into account the average cost of food, accommodation, etc in": "Miqdor 2024 yil uchun oziq-ovqat, turar joy va hokazolarning o'rtacha narxini hisobga olgan holda ko'rsatilgan",
      "for 2024": "",
      "Courses available": "Mavjud kurslar",
      "First Name": "Ism",
      "Last Name": "Familiya",
      "Who Are You": "Kimsiz?",
      "Phone Number": "Telefon raqam",
      "Region": "Viloyat",
      "Submit": "Arizani yuborish",
      "Learn more": "Batafsil ma'lumot",
      "courses available": "kurslar mavjud",
      "Featured": "Tavsiya etilgan",
      "Free": "Bepul",
      "Next": "Keyingi",
      "Previous": "Oldingi"
    }
  }
}

